{"version":3,"sources":["components/HexToRgb/HexToRgb.js","components/Converter/Converter.jsx","App.js","reportWebVitals.js","index.js"],"names":["HexToRgb","props","color","match","checkValue","rgb","r","parseInt","g","b","Converter","useState","setColor","colorBody","setColorBody","document","getElementsByTagName","style","backgroundColor","className","onSubmit","evt","preventDefault","console","log","id","type","name","value","onChange","target","length","substring","autoFocus","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kPA+BeA,MA5Bf,SAAkBC,GAChB,IAAMC,EAAQD,EAAMC,MAAMC,MAAM,WAE1BC,EAAa,SAACF,GAClB,OAAOA,EAAMC,MAAM,wBAGrB,GAAIC,EAAWF,EAAM,KAAOE,EAAWF,EAAM,KAAOE,EAAWF,EAAM,IACnE,MAAO,QAGT,IAAMG,EAAM,CACVC,EAAGC,SAASL,EAAM,GAAI,IACtBM,EAAGD,SAASL,EAAM,GAAI,IACtBO,EAAGF,SAASL,EAAM,GAAI,KAGxB,OACE,uCACOG,EAAIC,EADX,KACgBD,EAAIG,EADpB,KACyBH,EAAII,EAD7B,QC4BWC,MA7Cf,SAAmBT,GAAQ,IAAD,EACEU,mBAAS,MADX,mBACjBT,EADiB,KACVU,EADU,OAEUD,mBAAS,WAFnB,mBAEjBE,EAFiB,KAENC,EAFM,KAyBxB,OArBaC,SAASC,qBAAqB,QAAQ,GAC9CC,MAAMC,gBAAkBL,EAqB3B,sBAAKM,UAAU,YAAf,UACE,sBAAMA,UAAU,iBAAiBC,SApBhB,SAACC,GACpBA,EAAIC,iBAEJC,QAAQC,IAAItB,IAiBV,SACE,uBACEuB,GAAG,WACHC,KAAK,OACLC,KAAK,WACLC,MAAO1B,EACP2B,SApBa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACM,IAAxBA,EAAOF,MAAMG,QACfjB,EAAa,IAAD,OAAKgB,EAAOF,MAAMI,UAAU,KAGtCF,EAAOF,MAAMG,OAAS,GAI1BnB,EAAS,KAAD,OAAMkB,EAAOF,MAAMI,UAAU,MAY/Bb,UAAU,uBACVc,WAAS,MAGb,qBAAKd,UAAU,mBAAf,SACGjB,EAAM6B,OAAS,GAAK,cAAC,EAAD,CAAU7B,MAAOA,UChC/BgC,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,cAAC,EAAD,OCMSgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASgC,eAAe,SAM1BZ,M","file":"static/js/main.330733bb.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction HexToRgb(props) {\n  const color = props.color.match(/.{1,2}/g)\n\n  const checkValue = (color) => {\n    return color.match(/[^\\dabcdefABCDEF]/gm)\n  }\n\n  if (checkValue(color[1]) || checkValue(color[2]) || checkValue(color[3])) {\n    return 'Error'\n  }\n\n  const rgb = {\n    r: parseInt(color[1], 16),\n    g: parseInt(color[2], 16),\n    b: parseInt(color[3], 16),\n  }\n\n  return (\n    <div>\n      rgb({rgb.r}, {rgb.g}, {rgb.b})\n    </div>\n  )\n}\n\nHexToRgb.propTypes = {\n  color: PropTypes.string.isRequired,\n}\n\nexport default HexToRgb\n","import React, { useState } from 'react'\nimport './Converter.css'\nimport HexToRgb from '../HexToRgb/HexToRgb'\n\nfunction Converter(props) {\n  const [color, setColor] = useState('# ')\n  const [colorBody, setColorBody] = useState('#ffffff')\n\n  const body = document.getElementsByTagName('body')[0]\n  body.style.backgroundColor = colorBody\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault()\n\n    console.log(color)\n  }\n\n  const handleChange = ({ target }) => {\n    if (target.value.length === 8) {\n      setColorBody(`#${target.value.substring(2)}`)\n    }\n\n    if (target.value.length > 8) {\n      return\n    }\n\n    setColor(`# ${target.value.substring(2)}`)\n  }\n\n  return (\n    <div className=\"Converter\">\n      <form className=\"Converter-form\" onSubmit={handleSubmit}>\n        <input\n          id=\"colorHEX\"\n          type=\"text\"\n          name=\"colorHEX\"\n          value={color}\n          onChange={handleChange}\n          className=\"Converter-form-field\"\n          autoFocus\n        />\n      </form>\n      <div className=\"Converter-output\">\n        {color.length > 7 && <HexToRgb color={color} />}\n      </div>\n    </div>\n  )\n}\n\nexport default Converter\n","import './App.css'\nimport Converter from './components/Converter/Converter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Converter />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}